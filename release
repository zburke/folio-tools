#!/bin/sh

#
# handle release of a new version from tip-of-branch in GitHub and Jira:
#
#   * tag tip of current branch with the new version
#   * push the tag to GitHub
#   * find Jira tags in commit-subjects since the last release and update their fix version
#   * trigger a build in Jenkins
#
# usage: $0 <JIRA-PROJECT> <JIRA-release> [start-commit] [end-commit]
#
# start-commit defaults to the most recent tag, end-commit to tip-of-branch
#
# credentials for Jira and Jenkins are pulled from the MacOS keychain
# stored with the service string "jira-password" and "jenkins-token",
# respectively, including the username in the "account" field, or from
# the environment variables JIRA_PASSWORD and JENKINS_TOKEN. Likewise,
# the username can alternatively be found in the environment variables
# JIRA_USERNAME and JENKINS_USERNAME, or USER, if it is not found in any
# of the previous scopes.
#


quit()
{
    if [[ -n $1 ]]; then echo $1; fi;
    echo "usage: $0 <JIRA-NAME> <version-number> [start-hash] [end-hash]"
    echo "start-hash defaults to the most recent tag, end-hash to tip-of-current-branch"
    # //$2 && rm -rf $2;

    exit 1;
}


#
# getAttr - retrieve attribute from MacOS security service
# $1 service-name, e.g. jira-password
# $2 field, e.g. acct
#
getAttr()
{
    security find-generic-password -s "$1" | grep $2 | cut -d\" -f 4
}


#
# getPassword - retrieve password from MacOS security service
# $1 service-name, e.g. jira-password
# $2 account, e.g. someusername
#
getPassword()
{
    security find-generic-password -s "$1" -a "$2" -w
}


JIRA=$1       # jira project, e.g. STCOR
TAG=$2        # release as tagged on Jira, e.g. 1.2.3
HASH_FROM=$3  # retrieve commits from here...
HASH_TO=$4    # ... to here

# check on required arguments
if [[ -z $JIRA || -z $TAG ]]; then
    quit
fi

# check on required helpers: git, jq, curl
if ! [ -x "$(command -v git)" ]; then
    quit "git is required but could not be found in your path"
fi

if ! [ -x "$(command -v jq)" ]; then
    quit "jq is required but could not be found in your path"
fi

if ! [ -x "$(command -v curl)" ]; then
    quit "curl is required but could not be found in your path"
fi


# jira version must match npm version
NPM_VERSION=`grep version package.json | cut -d\" -f 4`
if [ ! "$NPM_VERSION" = "$TAG" ]; then
    quit "The npm version ($NPM_VERSION) and Jira version ($TAG) must match."
fi

# validate optional arguments
# hash-from defaults to the last tag if not specified
if [[ -z $HASH_FROM ]]; then
    HASH_FROM=`git tag -l | tail -1`
fi

if [ ! git show $HASH_FROM > /dev/null 2>&1 ]; then
    quit "Sorry; $HASH_FROM was not recognized as a tag or commit hash."
fi

# hash-to defaults to tip of current branch if not specified
if [[ -z $HASH_TO ]]; then
    HASH_TO=`git rev-parse --abbrev-ref HEAD`
fi

if [ ! git show $HASH_TO > /dev/null 2>&1 ]; then
    quit "Sorry; $HASH_TO was not recognized as a tag, commit hash, or branch-name."
fi

GHTAG="v$TAG" # release as tagged in git, e.g. v1.2.3

# jira username from keychain, else $JIRA_USERNAME, else $USER
JIRA_USER=`getAttr "jira-password" "acct"`
if [[ -z $JIRA_USER ]]; then JIRA_USER=$JIRA_USERNAME; fi
if [[ -z $JIRA_USER ]]; then JIRA_USER=$USER; fi

JIRA_PASS=`getPassword "jira-password" "$JIRA_USER"`
if [[ -z $JIRA_PASS ]]; then JIRA_PASS=$JIRA_PASSWORD; fi
if [[ -z $JIRA_USER || -z $JIRA_PASS ]]; then
    quit "could not find jira credentials"
fi

# jenkins username from keychain, else $JENKINS_USERNAME, else $USER
JENKINS_USER=`getAttr "jenkins-token" "acct"`
if [[ -z $JENKINS_USER ]]; then JENKINS_USER=$JENKINS_USERNAME; fi
if [[ -z $JENKINS_USER ]]; then JENKINS_USER=$USER; fi

JENKINS_PASS=`getPassword "jenkins-token" $JENKINS_USER`
if [[ -z $JENKINS_PASS ]]; then JENKINS_PASS=$JENKINS_TOKEN; fi
if [[ -z $JENKINS_USER || -z $JENKINS_PASS ]]; then
    quit "could not find jenkins credentials"
fi


# extract the repo name from the GitHub URL
REPO=`git config remote.origin.url | sed -E 's/.*\/([^\/]+)\.git$/\1/'`

# get JIRAs from commit headers between previous and current releases
TICKETS=`git log --pretty=oneline ${HASH_FROM}..${HASH_TO} | cut -c42- | egrep ^$JIRA  | sed -E "s/^($JIRA\-[0-9]+).*/\1/g" | sort | uniq`

# base64 auth token for Jira
JIRA_AUTH_HEADER=`printf "${JIRA_USER}:${JIRA_PASS}" | base64`

echo "tagging release $GHTAG and pushing it to GitHub..."
git tag $GHTAG
git push --tags -q

# update fix-version for each ticket
for ticket in $TICKETS; do
    NEW_VERSIONS=
    OLD_VERSIONS=`curl -s --location -X GET https://issues.folio.org/rest/api/2/issue/$ticket -q | jq '.fields.fixVersions[] | .name '`
    if [[ -n $OLD_VERSIONS ]]; then
        for version in $OLD_VERSIONS; do
            if [[ -z $NEW_VERSIONS ]]; then
                NEW_VERSIONS="{\"name\": \"$TAG\"}";
            else
                NEW_VERSIONS="${NEW_VERSIONS}, {\"name\": \"$TAG\"}";
            fi;
        done
    else
        NEW_VERSIONS="{\"name\": \"$TAG\"}";
    fi

    curl -s --location \
        -X PUT "https://issues.folio.org/rest/api/2/issue/$ticket" \
        -H "content-type: application/json" \
        -H "Authorization: Basic $JIRA_AUTH_HEADER" \
        -d "{\"fields\": { \"fixVersions\": [$NEW_VERSIONS] } }"
    echo "added $TAG to $ticket"
done;

# trigger a jenkins build
# base64 auth token for Jenkins
JENKINS_AUTH_HEADER=`printf $JENKINS_USER:$JENKINS_PASS | base64`

echo "triggering Jenkins build..."

curl -X POST https://jenkins-aws.indexdata.com/job/folio-org/job/$REPO/view/tags/job/$GHTAG/build \
    --header "Authorization: Basic $JENKINS_AUTH_HEADER" \

echo 'done!'
